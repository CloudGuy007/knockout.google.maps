/*
*   knockout.google.maps 0.1.0 (2014-01-15)
*   Created by Manuel Guilbault (https://github.com/manuel-guilbault)
*
*   Source: https://github.com/manuel-guilbault/knockout.google.maps
*   MIT License: http://www.opensource.org/licenses/MIT
*/!function(a){"function"==typeof require&&"object"==typeof exports&&"object"==typeof module?a(require("knockout"),exports):"function"==typeof define&&define.amd?define(["knockout","exports"],a):a(ko,ko.validation={})}(function(a){if(void 0===typeof a)throw"Knockout is required, please ensure it is loaded before loading this plugin";a.google={maps:{}},a.google.maps.utils={assignBindingToOptions:function(b,c,d,e,f){var g=a.utils.unwrapObservable(b[c]);void 0===g&&(g=e),f&&(g=f(g)),d[c]=g},isArray:function(a){return"[object Array]"===Object.prototype.toString.call(a)}},function(){a.google.maps.Subscriptions=function(){this.handlers=[]},a.google.maps.Subscriptions.prototype.add=function(b){if("function"==typeof b)this.handlers.push(b);else if(a.google.maps.utils.isArray(b))Array.prototype.push.apply(this.handlers,b);else{if("object"!=typeof b||b.prototype!==this.prototype)throw new TypeError("Invalid subscription");Array.prototype.push.apply(this.handlers,b.handlers)}},a.google.maps.Subscriptions.prototype.addGMListener=function(a){this.handlers.push(function(){google.maps.event.removeListener(a)})},a.google.maps.Subscriptions.prototype.addKOSubscription=function(a){this.handlers.push(function(){a.dispose()})},a.google.maps.Subscriptions.prototype.dispose=function(){for(var a=0;a<this.handlers.length;++a)this.handlers[a]();this.handlers=[]}}(),function(){function b(b,c,d,e){if("string"==typeof e)a.google.maps.utils.assignBindingToOptions(c,e,d);else if("object"==typeof e)a.google.maps.utils.assignBindingToOptions(c,e.name,d,e.defaultValue,e.transform);else{if("function"!=typeof e)throw new TypeError("Unsupported createOptions definition");e(b,c,d)}}function c(c,d,e,f){f&&!a.google.maps.utils.isArray(f)&&(f=[f]);for(var g=0;g<f.length;++g)b(c,d,e,f[g])}function d(a,b,d){var e={};for(var f in d){var g=d[f];g.createOptions&&c(a,b,e,g.createOptions)}return e}function e(a,b){if("function"==typeof b)return b.apply(a,[]);if("string"==typeof b)return a[b].apply(a,[]);throw new TypeError("Invalid getter")}function f(a,b,c){if("function"==typeof b)return b.apply(void 0,[a,c]);if("string"==typeof b)return a[b].apply(a,[c]);throw new TypeError("Invalid setter")}function g(b,c,d,g,h){"string"==typeof h&&(h={name:h}),a.isObservable(c[h.name])&&(h.vmToObj||(h.vmToObj={}),h.vmToObj.setter?g.addKOSubscription(c[h.name].subscribe(function(a){f(d,h.vmToObj.setter,a)})):"function"!=typeof d.setOptions||h.vmToObj.noOptions||g.addKOSubscription(c[h.name].subscribe(function(a){var b={};b[h.vmToObj.option||h.name]=a,d.setOptions(b)})),h.objToVM&&g.addGMListener(google.maps.event.addListener(d,h.objToVM.event,function(){var a=e(d,h.objToVM.getter);c[h.name](a)})))}function h(b,c,d,e,f){f&&!a.google.maps.utils.isArray(f)&&(f=[f]);for(var h=0;h<f.length;++h)g(b,c,d,e,f[h])}function i(a,b,c,d,e){"function"==typeof b[e]&&d.addGMListener(google.maps.event.addListener(c,e,function(a){b[e](a)}))}function j(b,c,d,e,f){f&&!a.google.maps.utils.isArray(f)&&(f=[f]);for(var g=0;g<f.length;++g)i(b,c,d,e,f[g])}function k(a,b,c,d,e){for(var f in e){var g=e[f];g.bindings&&h(a,b,c,d,g.bindings),g.events&&j(a,b,c,d,g.events),g.bind&&g.bind(a,b,c,d)}}a.google.maps.binder={getCreateOptions:d,bind:k}}(),a.bindingHandlers.infoWindow={init:function(b,c,d,e,f){if(void 0===f.$map)throw"infoWindow binding must be used only inside the scope of a map binding.";var g=a.utils.unwrapObservable(c()),h=f.extend({});a.applyBindingsToDescendants(h,b);var i=a.google.maps.binder.getCreateOptions(f,g,a.bindingHandlers.infoWindow.binders);i.content=b;var j=new google.maps.InfoWindow(i),k=new a.google.maps.Subscriptions;a.google.maps.binder.bind(f,g,j,k,a.bindingHandlers.infoWindow.binders);var l=f.$subscriptions;return l.add(function(){k.dispose(),a.utils.domData.get(j,"isOpen")&&j.close()}),{controlsDescendantBindings:!0}},binders:{visible:{bind:function(b,c,d,e){var f=!1;a.utils.unwrapObservable(c.visible)&&(d.open(b.$map,a.utils.unwrapObservable(c.anchor)),f=!0),a.utils.domData.set(d,"isOpen",f),a.isObservable(c.visible)&&(e.addKOSubscription(c.visible.subscribe(function(e){var f=a.utils.domData.get(d,"isOpen");f&&!e?d.close():!f&&e&&d.open(b.$map,a.utils.unwrapObservable(c.anchor)),a.utils.domData.set(d,"isOpen",e)})),e.addGMListener(google.maps.event.addListener(d,"closeclick",function(){a.utils.domData.set(d,"isOpen",!1),c.visible(!1)})))}},disableAutoPan:{createOptions:"disableAutoPan",bindings:"disableAutoPan"},maxWidth:{createOptions:{name:"maxWidth",defaultValue:0},bindings:"maxWidth"},pixelOffset:{createOptions:{name:"pixelOffset",defaultValue:new google.maps.Size(0,0)},bindings:"pixelOffset"},position:{createOptions:"position",bindings:{name:"position",vmToObj:{setter:"setPosition"}}}}},a.bindingHandlers.map={init:function(b,c,d,e,f){var g=a.utils.unwrapObservable(c()),h=b.cloneNode(!0),i=a.google.maps.binder.getCreateOptions(f,g,a.bindingHandlers.map.binders),j=new google.maps.Map(b,i),k=new a.google.maps.Subscriptions;a.google.maps.binder.bind(f,g,j,k,a.bindingHandlers.map.binders);var l=f.extend({$map:j,$subscriptions:k});return a.applyBindingsToDescendants(l,h),a.utils.domNodeDisposal.addDisposeCallback(b,function(){k.dispose(),a.utils.domNodeDisposal.cleanNode(h)}),{controlsDescendantBindings:!0}},binders:{center:{createOptions:"center",bind:function(b,c,d,e){if(a.isObservable(c.center)){var f=!1;e.addGMListener(google.maps.event.addListener(d,"center_changed",function(){f||(f=!0,c.center(d.getCenter()),f=!1)})),e.addKOSubscription(c.center.subscribe(function(){f||(f=!0,a.utils.unwrapObservable(c.panCenter)?d.panTo(c.center()):d.setCenter(c.center()),f=!1)}))}}},zoom:{createOptions:{name:"zoom",defaultValue:8},bindings:{name:"zoom",objToVM:{event:"zoom_changed",getter:"getZoom"},vmToObj:{setter:"setZoom"}}},mapTypeId:{createOptions:"mapTypeId",bindings:{name:"mapTypeId",vmToObj:{setter:"setMapTypeId"}}},bounds:{createOptions:"bounds",bind:function(b,c,d,e){if(a.isObservable(c.bounds)){var f=!1;e.addGMListener(google.maps.event.addListenerOnce(d,"idle",function(){f=!0,c.bounds(d.getBounds()),f=!1})),e.addGMListener(google.maps.event.addListener(d,"bounds_changed",function(){f||(f=!0,c.bounds(d.getBounds()),f=!1)})),e.addKOSubscription(c.bounds.subscribe(function(){f||(f=!0,a.utils.unwrapObservable(c.panBounds)?d.panToBounds(c.bounds()):d.fitBounds(c.bounds()),f=!1)}))}}},backgroundColor:{createOptions:"backgroundColor"},draggable:{createOptions:"draggable",bindings:"draggable"},maxZoom:{createOptions:"maxZoom",bindings:"draggable"},minZoom:{createOptions:"minZoom",bindings:"minZoom"},dragend:{events:"dragend"},idle:{events:"idle"}}},function(){function b(b,c,d){var e=a.utils.domData.get(d,"subscriptions");e||(e=new a.google.maps.Subscriptions,a.utils.domData.set(d,"subscriptions",e));var f=b.createChildContext(d).extend({$subscriptions:e});a.applyBindingsToDescendants(f,c.cloneNode(!0))}function c(b){var c=a.utils.domData.get(b,"subscriptions");c&&c.dispose(),a.utils.domData.clear(b)}function d(d,e,f,g){for(var h=a.utils.compareArrays(f,g),i=0;i<h.length;++i){var j=h[i];switch(j.status){case"added":b(d,e,j.value);break;case"deleted":c(j.value)}}}a.bindingHandlers.mapItems={init:function(c,e,f,g,h){for(var i=e(),j=a.utils.unwrapObservable(i),k=0;k<j.length;++k)b(h,c,j[k]);return a.isObservable(i)&&(a.utils.domData.set(c,"oldItems",i().slice(0)),i.subscribe(function(){var b=i(),e=a.utils.domData.get(c,"oldItems");d(h,c,e,b),a.utils.domData.set(c,"oldItems",b.slice(0))})),{controlsDescendantBindings:!0}}},a.virtualElements.allowedBindings.mapItems=!0}(),a.bindingHandlers.marker={init:function(b,c,d,e,f){if(void 0===f.$map)throw"marker binding must be used only inside the scope of a map binding.";var g=a.utils.unwrapObservable(c()),h=a.google.maps.binder.getCreateOptions(f,g,a.bindingHandlers.marker.binders);h.map=f.$map;var i=new google.maps.Marker(h),j=new a.google.maps.Subscriptions;a.google.maps.binder.bind(f,g,i,j,a.bindingHandlers.marker.binders);var k=f.extend({$marker:i,$subscriptions:j});a.applyBindingsToDescendants(k,b);var l=f.$subscriptions;return l.add(function(){j.dispose(),i.setMap(null)}),{controlsDescendantBindings:!0}},binders:{animation:{createOptions:"animation",bindings:{name:"animation",vmToObj:{setter:"setAnimation"}}},clickable:{createOptions:"clickable",bindings:{name:"clickable",vmToObj:{setter:"setClickable"}}},cursor:{createOptions:"cursor",bindings:{name:"cursor",vmToObj:{setter:"setCursor"}}},icon:{createOptions:"icon",bindings:{name:"icon",vmToObj:{setter:"setIcon"}}},raiseOnDrag:{createOptions:"raiseOnDrag"},shadow:{createOptions:"shadow",bindings:{name:"shadow",vmToObj:{setter:"setShadow"}}},position:{createOptions:"position",bind:function(b,c,d,e){if(a.isObservable(c.position)){var f=!1;e.addKOSubscription(c.position.subscribe(function(){f||(f=!0,d.setPosition(c.position()),f=!1)}));var g=a.utils.unwrapObservable(c.positionUpdateOnDragEnd)?"dragend":"position_changed";e.addGMListener(google.maps.event.addListener(d,g,function(){f||(f=!0,c.position(d.getPosition()),f=!1)}))}}},draggable:{createOptions:"draggable",bindings:{name:"draggable",vmToObj:{setter:"setDraggable"}}},flat:{createOptions:"flat",bindings:{name:"flat",vmToObj:{setter:"setFlat"}}},title:{createOptions:"title",bindings:{name:"title",vmToObj:{setter:"setTitle"}}},visible:{createOptions:"visible",bindings:{name:"visible",vmToObj:{setter:"setVisible"}}},click:{events:"click"},doubleclick:{events:"dblclick"},rightclick:{events:"rightclick"},mousedown:{events:"mousedown"},mouseout:{events:"mouseout"},mouseover:{events:"mouseover"},mouseup:{events:"mouseup"}}},a.virtualElements.allowedBindings.marker=!0});